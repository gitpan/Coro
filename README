NAME
    Coro - coroutine process abstraction

SYNOPSIS
     use Coro;

     async {
        # some asynchronous thread of execution
     };

     # alternatively create an async process like this:

     sub some_func : Coro {
        # some more async code
     }

     yield;

DESCRIPTION
    $main
    This coroutine represents the main program.

    $current
    The current coroutine (the last coroutine switched to). The initial
    value is "$main" (of course).

    $idle
    The coroutine to switch to when no other coroutine is running. The
    default implementation prints "FATAL: deadlock detected" and exits.

  STATIC METHODS

    Static methods are actually functions that operate on the current
    process only.

    async { ... };
        Create a new asynchronous process and return it's process object
        (usually unused). When the sub returns the new process is
        automatically terminated.

    schedule
        Calls the scheduler. Please note that the current process will not
        be put into the ready queue, so calling this function usually means
        you will never be called again.

    yield
        Yield to other processes. This function puts the current process
        into the ready queue and calls "schedule".

    terminate
        Terminates the current process.

    # dynamic methods

  PROCESS METHODS

    These are the methods you can call on process objects.

    new Coro \&sub;
        Create a new process and return it. When the sub returns the process
        automatically terminates. To start the process you must first put it
        into the ready queue by calling the ready method.

    $process->ready
        Put the current process into the ready queue.

SEE ALSO
    the Coro::Channel manpage, the Coro::Cont manpage, the Coro::Specific
    manpage, the Coro::Semaphore manpage, the Coro::Signal manpage, the
    Coro::State manpage, the Coro::Event manpage.

AUTHOR
     Marc Lehmann <pcg@goof.com>
     http://www.goof.com/pcg/marc/

