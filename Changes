Revision history for Perl extension Coro.

TODO: should explore PerlIO::via::CoroCede and PerlIO::via::CoroAIO.
TODO: maybe implement a default message channel, very much like Erlang
      (which is cool in a lot of important aspects (failures!),
      but very lacking in others (higher level ipc)).

4.21 Sun Nov 25 10:48:59 CET 2007
	- fix a spurious memory read.
        - Coro::EV no longer keeps the eventloop "alive".

4.2  Fri Nov  9 20:47:05 CET 2007
	- enable/disable tracing from a new coroutine, not a pooled one.
        - fix a memleak in Coro::Event.
        - removed killall call from fork_eval.
        - made sure store_fd is already loaded so that fork_eval
          does not have to parse autoload in each subprocess.
        - only use assembly method if -O switch is in $Config{optimize}.
        - add (optional) Coro::EV module, so far the best event loop module
          directly supported by Coro.
        - if the event model is EV, use EV::DNS to resolve
          stuff in Coro::Util.
        - don't get confused by multiple event notifications in Coro::Handle.
        - initial support for EV (libevent interface).
        - require Event and EV using configure_requires, to force their existance.

4.13 Wed Oct 24 07:26:45 CEST 2007
	- add Coro::Storable::blocking_thaw.
        - use a vastly more complicated technique to localise
          $SIG{__WARN/DIE__} that also works on perls <= 5.8.8.
        - use a coroutine for the idle callback Coro::Event,
          instead of running Event in the current coroutine context.
          This also catches recursive invocations.
        - actually report fork errors in gethostbyname and inet_aton.

4.11 Thu Oct 11 02:40:24 CEST 2007
	- port to threaded perls.

4.1  Thu Oct 11 02:38:16 CEST 2007
      	- incompatible change: $SIG{__DIE__} and $SIG{__WARN__} will now
          be local to each coro (see Coro::State).
        - incompatible change: for very deep reasons, cede and cede_notself
          cannot return anything, so nothing will be returned.
	- possibly bring back 5.10 compatibility (untested).
        - work around stupid (and wrong) warning on 5.10 :(.
	- overlay the saved state over the context stack. This saves
          a few hundred bytes per coroutine on average and also
          speeds up context switching a bit.
        - further tune default stack sizes.
        - (more) correctly calculate stack usage in coro_rss.
        - Coro::Storable::blocking_* did not properly lock
          resulting in races between coroutines.
        - added Coro::Storable::guard.
        - stopping to trace a coroutine could destroy the cctx of
          an unrelated coroutine.
        - explain the relationship between Perl and C coroutines in
          more detail in Coro::State.
        - Coro::Util::inet_aton did not short-circuit dotted quad forms,
          causing a fork per resolve. This also affected Coro::Socket.
        - switch to a separate stack in $coro->call/eval to avoid
          invalidating pointers.

4.03 Sat Oct  6 21:24:00 CEST 2007
	- added Coro::throw method.
	- minor code cleanups.

4.02 Sat Oct  6 02:36:47 CEST 2007
	- fix a very minor per-coroutine memleak (a single codereference).
	- fixed a bug where the currently in-use c context would be freed
          prematurely (can happen only when programs change the stacksize
          or use tracing).
        - tracing can no longer keep a coro alive after it terminated.
        - do static branch prediction in the common path for gcc. gives
          about 2-5% speed improvement here.

4.01 Fri Oct  5 22:10:49 CEST 2007
	- instead of recreating *a* standard output handle we simply
          use STDOUT, which is faster and hopefully more robust.

4.0  Fri Oct  5 12:56:00 CEST 2007
        - incompatibly changed Coro::Storable::freeze.
        - major new feature: added Coro::Debug, for interactive coroutine
          debugging, tracing and much more.
        - major bug fix: unbelievable, but true: $_, $/ and many other
          "saved" variables actually weren't being saved. This has been fixed,
          of course, while increasing performance while losing all the save
          flags.
        - save flags are gone, and all the api functions dealing with them.
	- added Coro::Semaphore::adjust.
        - added Coro::Util::fork_eval.
        - added Coro::Storable::{nfreeze,blocking_{freeze,nfreeze}}.
        - added Coro::killall.
        - reduce initial stack sizes to allow for "micro-coroutines".
        - better async_pool resource management, moved parts of async_pool
          handling to XS (major speed improvement).
        - actually croak before modifying important data structures.
        - refuse to transfer while compiling.
        - possibly support eval EXPR better now.
        - enable assembly per default on linux+bsd x86+amd64.
        - all internal members were renamed _something for easier subclassing.
        - many minor tweaks.

3.63 Wed May 16 14:10:06 CEST 2007
	- implement handcoded assembly for x86/amd64 SVR ABI.

3.62 Fri Apr 27 21:36:06 CEST 2007
	- upgrade libcoro (which might set unwind info correctly).
        - change default on linux to setjmp/longjmp.

3.61 Thu Apr 19 12:36:18 CEST 2007
	- Coro::Storable caused an endless loop when thawing invalid
          pst's sometimes.
	- use a Semaphore in Coro::Storable, as Storable doesn't
          seem to be reentrant (although it is documented to
          be threadsafe...).
        - fix Coro::Signal to bring back the original unreliable
          but stateful semantics.
        - fixed a lot of typos in Coro.pm (patch submitted by David
          Steinbrunner, which applied flawlessly).

3.6  Sat Apr 14 17:13:31 CEST 2007
   	- added some bugfixes to get eg/myhttpd working again.
        - added Coro::Storable for often-cede'ing freeze/thaw.
        - try to do a clean exit when a coroutine calls exit
          (EXPERIMENTAL).
        - got rid of indirect call through _coro_init.
        - updated the partly antique examples in eg/ to
          work again and be a bit less magic, too.
        - fixed Coro::Signal semantics to work as documented again.

3.55  Sun Mar 25 01:20:47 CET 2007
	- add SAVE_DEFFH to save the default filehandle and enable
          it by default.
        - finally move socket-operations from Coro::Socket to Coro::Handle
          to be able to unblock foreign sockets.
	- add Coro::State::save_also and guarded_save.
	- add count accessor to Coro::Semaphore.
        - add Coro::State::cctx_stacksize.
        - just for the fun of it, do not rely on implicit context,
          which can dramatically improve performance, but people
          using windows-process-emulation perls do not care much about
          performance.

3.51  Sun Mar  4 14:18:04 CET 2007
	- fixed a problem when you weakened references to Coro::State's
          (patch by Yuval Kogman).

3.501 Wed Feb 28 12:44:07 CET 2007
	- rename some global symbols as macosx from hell redefines
          them without asking.

3.5 Tue Feb 13 20:22:53 CET 2007
	- do AnyEvent model detection earlier, avoiding problems
          caused by first using AnyEvent and later Coro::Event.
        - implement and document Coro::Event event objects.
        - fix a potential problem in Coro::Event causing crashes.
        - initialise PL_comppad when creating a new coroutine,
          avoids crashes on early coro destruction.

3.41 Mon Jan 22 19:19:49 CET 2007
	- readline on Coro::Handle did not support undefined $/,
          nor did it deliver partial lines on EOF or error.
        - implement malloc fallback for stack allocation because
          stupid broken idiotic OSX has a stupid broken
          idiotic fits-the-whole-os mmap "implementation" and
          my dick feels longer if Coro is portable even to
          obsolete platforms.

3.4  Fri Jan 19 21:52:54 CET 2007
	- remove t/09_timer.t, as it isn't really testing much
          but was rather flaky in practise.
        - async_pool coro would keep arguments and callback alive until
          it was reused.
        - cancellation of a coroutine could cause spurious idle calls
          in cede_notself.

3.3  Sat Jan  6 03:45:00 CET 2007
	- implement $coro->on_destroy.
        - Coro::Event blocking semantics have been changed,
          documented and - hopefully - improved.
	- fix nice adding, not subtracting, from priority.
        - fix ->prio and api_is_ready (patch by Mark Hinds).
        - fixed an assert ("... == prev__cctx->idle_te")
          that could errronously trigger.
        - fix various large and small memleaks.
        - use a (hopefully) more stable cancel implementation
          that immediately frees the coroutine data.
        - cede/cede_notself return a status now.
        - added Coro::guard function.
        - added a global coroutine pool for jobs (on my machine,
          I can create and execute 48k simple coros/s with async,
          and 128k coros with async_pool).
        - Coro::AIO now uses the coroutine priority as io priority.

3.2  Fri Dec 22 05:07:09 CET 2006
	- improve portability to slightly older perls.
        - use cleaner coroutine destruction.
        - simplify configuration for users.
        - optionally (unrecommended) prefer perl functions over
          their coro replacements.

3.11 Tue Dec  5 13:11:24 CET 2006
        - fixed some bogus assert's, but as perl.h disables assert even
          without NDEBUG (thank you very much), not too many people should
          notice (that did include myself). Andreas König noticed, though :)
	- do not save/restore PL_sortcxix on >= 5.9.x, it doesn't seem to have
          it. Also noticed by Andreas König :)
        - save/restore tainted status.
        - verified to pass the testsuite on my 5.9.5.

3.1  Mon Dec  4 23:03:40 CET 2006
        - INCOMPATIBLE CHANGE: $/ is now per-coroutine (but slow).
        - incompatible change: transfer flags are now per-state.
	- give a better error message on deadlock.
        - document Coro::nready.
        - enhanced testsuite.

3.01 Sun Dec  3 23:47:42 CET 2006
	- forgot to include Coro::Timer.

3.0  Sun Dec  3 22:57:25 CET 2006
	- the "FINALLY COMPLETELY STABLE" release (coming soon:
          the "FAMOUS LAST WORDS" release).
	- implement a new stack sharing algorithm, which uses a stack
          pool (size currently hardcoded).
        - make stack sharing mandatory (it no longer uses a heuristic).
        - eval/die no longer cause weird problems under heavy use.
        - Coro::Event could cause livelocks if it was used but
          no Coro::Event watchers were used.
        - Coro::Event now uses asynccheck as prepare does not
          check for changed watchers.
        - Coro::Event allows multiple waiting coros and will wake up one
          per event.
        - Coro::Event should be cleaner and more efficient now.
        - new utility function Coro::unblock_sub.
        - document the sad fact that Event is no longer reentrant.
        - putting a coroutine into the ready queue twice could under
          some circumstances lead to stack corruption.
        - minor incompatibility: subclassing Coro::State is supported
          directly now without going through a _coro_state member.
        - state/coro switching is much faster now.
        - very minor optimisations and code/documentation cleanup.
        - avoid problems due to compiler inlining.
        - removed timers from Coro::Timer -> use AnyEvent instead.
        - replaced Coro::idle coroutine by (cleaner) idle handler.
        - updated to newest libcoro.
        - implement enhanced support for valgrind.
        - implement is_ready and return value for ready.
        - removed Coro::Cont, it was a misnomer (it's generators),
          and it was somewhat annoying to get it right. Will come back
          if somebody asks for it :)
        - many ->wait methods and Coro::Event could return
          spuriously without the event having happened.

2.5  Tue Nov  7 12:22:33 CET 2006
        - made Coro::Util, Coro::Select, Coro::Handle and Coro::Socket
          use AnyEvent, moved them to Coro/.
	- added Coro::LWP which contains all the uglyness required to
          make LWP non-blocking.
	- should work with perl 5.9.x now (Andreas König made me do it).
        - fixed another bug in Coro::Select when the timeout was undef.
        - reuse PL_start_env for all coros, saves some memory per coroutine.
        - manage PL_top_env differently, hopefully to avoid panic: top_env.
        - timeout argument was not properly used in Coro::Socket.
        - allow limited forms of subclassing in Coro::Handle/Coro::Socket.
        - emulate undocumented(!) functionality of IO::Socket required
          by LWP(!!).
        - updated eg/lwp to work with newer lwp's.
        - remove "FATAL: uncaught exception" prefix. Coroutines that die
          kill the whole process, just as exceptions in the main "coroutine"
          did already.

2.1  Wed Nov  1 23:01:13 CET 2006
        - fix a long-standing bug in Coro::Select where select with
          zero timeout would instead change the current default filehandle.
	- use a simpler and hopefully more robust way to clone padlists
          (uses less memory and a perl function instead of our own).
        - coro can now create a stack guard area on many architectures.
        - Coro::AIO properly reexports additional functions from IO::AIO.
	- updated libcoro with a workaround for OS X,
          pach and testing by Michael Schwern.

2.0  Tue Oct 24 05:47:17 CEST 2006
	- support additional aio requests in Coro::AIO.

1.9  (never properly released due to a glitch)

1.8  Thu Feb  2 00:59:06 CET 2006
	- applied suggested patch by SAMV to avoid problems during stupid
          mark & sweep gc run.
        - applied patch by Scott Walters for 5.9.3 compatibility.

1.7  Tue Dec 27 01:41:58 CET 2005
	- added Coro::AIO, a thin wrapper around IO::AIO.
	- improved Makefile.PL explanations.

1.6  Mon Dec 12 21:30:05 CET 2005
	- additionally save PM_curpm might fix as-of-yet
          unseen problems with regex matches being attributed to the
          wrong package.
        - add t/10_bugs.t, which currently checks against imho broken
          perls that use 0.26MB of stack space per Perl_magic_get
          invocation (newer linuxes) as opposed to the 0.0002MB perl
          normally uses.
        - make stacksize configurable for the ultimate debian experience.

1.51 Mon Dec 12 18:48:36 CET 2005
	- remove debugging warn() accidentally left in Coro::Select.

1.5  Tue Nov 29 13:32:44 CET 2005
	- use Coro::Event inside Coro::Select to avoid spurious deadlocks.
        - fix Coro::Select 'select'.
        - strict'ify some modules.
	- libcoro errornously restored the SIGUSR2 handler to SIGUSR1.
        - use XSLoader in selected modules.
        - remove some 5.6 compatibility cruft.

1.4  Tue Sep  6 00:11:05 CEST 2005
	- libcoro did not take into account the trampoline on amd64,
          when 'l'inux method was used.

1.31 Tue Aug 30 23:31:33 CEST 2005
	- some portability fixes/workarounds.

1.3  Sat Aug 20 03:08:56 CEST 2005
	- no code changes. module seems to work fine.
	- improve Coro::State docs, remove reference to nonexisting
          Coro::State::flush method.
        - no longer autodetect windows, present it as an option instead.

1.2  Mon May 16 02:00:55 CEST 2005
	- included libcoro.c earlier in State.xs, might improve portability.
        - use a faster and possibly more stable Coro::Cont implementation.
        - accept x86_64 in addition to amd64 for optimized linux-amd64 support.
        - fix bugs Coro::SemaphoreSet that could cause locks never to be freed.
        - fix bugs in CoroAPI.h and document it in Coro::MakeMaker.

1.11 Thu Mar  3 18:00:52 CET 2005
	- change of contact address.

1.1 Tue Feb 22 20:51:16 CET 2005
	- support [l]inux method on amd64.
        - allow some context switches while compiling/eval'ing.

1.0  Tue Aug 10 03:47:27 CEST 2004
	- Event 0.89 fixes the bug again.
        - fix the remaining(??) memleak. I didn't free the cache-AV for
          padlists, so one AV per created anon-sub leaked.

0.97 Fri May 14 15:23:32 CEST 2004
	- remove stupid gcc extension that was an experiment only anyway.

0.96 Thu May 13 18:09:29 CEST 2004
	- tell people if they have yet another broken Event variant.
	- made Coro to work _better_ with threads (it seems that, as long
          as you use Coros in one thread only everything will work fine.
          Looking at the perl source the problem might be missing locking
          between Coro and some perl internal routines. That's not easily
          fixable).
        - (hopefully) got rid of the static xnext inside transfer.

0.95 Sun Feb 15 03:20:28 CET 2004
	- removed Coro::State::flush, implemented a new and much
          faster caching mechanism by attaching magic to the CV.
        - a memleak with (real) closures remains.
        - dramatically reduced size of stacks to 65536 (linux/x86), after
          observing that even myhttpd never had more than a kilobyte
          of stack in use (stack is still only physically allocated in
          pagesize increments for systems suporting mmap).
        - fix for a "cygwin-64" architecture added, proposed by Stefan Traby.
        - fix for threaded perl.

0.9  Sun Nov 23 04:32:39 CET 2003
	- fix a few very hard to track down but (of course) stupid
          memory leaks.
        - stringify version number to avoid locale problems :(.
        - perl 5.9.0 does not have SvPADBUSY, reported by Scott Walters,
          hopefully ignoring it "just works".

0.8   Wed Nov  5 19:38:40 CET 2003
	- port to perl5.005_03, but only 5.8.x+ is supported!
	- honor LocalAddr even without LocalPort in Coro::Socket.

0.7   Tue May 27 03:12:38 CEST 2003
        - the version jump indicates some level of testing, not gobs
          of new features.
	- uh... I found the prompt function in ExtUtils::MakeMaker.
          Highly correct stuff, that is...
        - fixed(?) a bug with die's in coroutines causing "panic: top_env".
          the fix is not well understood by the author, so beware :(.

0.652 Thu May  8 02:54:46 CEST 2003
	- Applied patch by Slaven Rezic to set default to "s" on FreeBSD,
          cause version 4 doesn't have ucontext.
	- Benjamin Reed reported that setjmp works fine on darwin,
          so preselect it.

0.651 Sat Mar 29 15:00:23 CET 2003
	- fix a bug in Coro::Handle where some bytes could get lost
          on reading, reported by jason@nichego.net.

0.65  Sun Mar 23 00:08:26 CET 2003
	- added a README.linux-glibc.
        - new module Coro::Select.
        - also save/restore PL_comppad, fixes segfaults with 5.8.1.
          (I never claimed that I know what I am doing ;).
        - set default to setjmp/longjmp on non-x86-linux.

0.6   Thu Nov 21 11:09:06 CET 2002
        - made lazy context switching the default.
	- fixed the bug where SemaphoreSet::guard
          was the same as timed_guard and timed_guard was missing.
        - fix a memleak in Coro::Timer.
        - reclassified context sharing as not experimental.

0.534 Sun Apr 14 03:05:12 CEST 2002
	- fixed backspace => tab in header parsing (myhttpd).
        - added eg/readline, for elmex.
        - Coro::Event now calls ->start on first call instead of
          ->again, which created wrong timeouts for the first ->next.
        - fixed a bug where Coro::Socket returned a closed socket instead
          of nothing on ECONNREFUSED and similar error conditions.

0.533 Mon Feb 18 18:49:40 CET 2002
	- adapt to finally working Event-0.85.
        - fixed buggy event initialization (trapped under windows, but how
          could it possibly have worked anywhere?)

0.532 Wed Jan 16 02:45:32 CET 2002
	- removed the reference to pp_entersub, might work on
          (some) win32 perls now (testsuite works under cygwin,
          without Event, which freezes).

0.531 Mon Dec 10 22:18:44 CET 2001
	- Fixed a bug in SemaphoreSet::timed_down.

0.53  Tue Nov 27 21:11:13 CET 2001
	- some tests for Event.
        - slightly different internal architecture to get refcnt into the object
          and not the reference. might fix a few bugs, certainly did introduce
          new ones.
        - Coro::Timer (independent of Event).
        - new timed_wait functions for Coro::Signal, Semaphore, SemaphoreSet.

0.52  Tue Nov  6 21:36:18 CET 2001
	- ported to cygwin (trivial).
          patch by Gerrit P. Haase <gp@familiehaase.de>.
        - small setjmp code fix by Sullivan.DanielJ@epamail.epa.gov.

0.51  Thu Nov  1 20:39:01 CET 2001
	- terminate/cancel now work properly (otherwise termination
          could cause a "next coroutine is not and contains not..."
          error.
        - added Coro::Socket::shutdown.
        - Coro::Event::loop no is the same as Event::loop.
        - implemented terminate with args + join.

0.5   Fri Sep 28 16:15:35 CEST 2001
	- fixed "print" on a Coro::Handle. The print method worked.
	- small tweaks (seem to reduce memory consumption a lot)
          in various modules.
        - splendid use of "no warnings" scattered throughout.
        - added Coro::Handle::rbuf, fixed Coro::Handle::fh.

0.49  Sun Sep 16 02:42:45 CEST 2001
	- changed some method calls to function calls for speed
          inside Coro::Handle.
        - make Coro::Handle use an array instead of a hash for
          speed reasons.
        - IRIX mystery solved: it's SGI's NT, after all: "standard, huh?".
          sjlj and ucontext should now work.
        - IRIX-specific port for libcoro.
        - swapped order of accept results to match IO::Socket.
        - changed getsock/peername to sock/peername to match IO::Socket.
        - fixed a bug that caused segfault when returning to main task
          under some circumstances.
        - other bugfixes.

0.45  Sun Sep  2 02:54:01 CEST 2001
	- new method Coro::Handle::timeout.
        - corrected speling of set...name to get...name in Coro::Socket.
        - Coro::Socket::accept now returns a Coro::Socket, not a Coro::Handle.
        - Coro::Handle now supports fileno and FILENO.
        - added eg/myhttpd, a web server.
        - Coro::Socket now accepts numeric ports as well as "port(number)"
          syntax.
        - moved some scheduling primitives into xs code. more to come.
        - new simple priority system.
        - implemented Coro::Event using XS, almost four times faster!
        - small memory corruption problem fixed (boy that was difficult).

0.13  Wed Aug  8 16:53:07 CEST 2001
	- new method Coro::Handle::readline.
        - added eg/lwp and Coro::Handle::autoflush, to make LWP work.
          (see eg/lwp on how to make LWP non-blocking).
        - renamed Coro::Socket::new_inet to new.
        - added Coro::Util, some utility functions.
        - die/eval now works better (still get annoying (but true ;)
          "Callback called exit" messages).
        - Coro::Handle now supports timeout, and Coro::Socket Timeout.
        - much better Coro::Socket support.

0.12  Fri Jul 27 04:19:01 CEST 2001
	- do not use mmap if neither MAP_ANON nor MAP_ANONYMOUS is defined.
	- very experimental stack sharing algorithm. not 100% safe but
          should work well in practise ;)
        - added Coro::RWLock.
        - Coro::Specific now works.

0.11  Tue Jul 24 22:49:21 CEST 2001
	- added specialized hack for newer and older linux versions (fast).
        - renamed Coro::Event::IO to Coro::Handle.
        - new module Coro::Socket.

0.1   Tue Jul 24 01:47:53 CEST 2001
	- release candidate 3. A rather new internal structure :(
        - the great renaming: Damian Conway gave me a suitable replacement
          for yield.
	- added Coro/libcoro, a portable coroutine implementation for C
          (not even perl-dependent!!!), which can be used by Coro::State.
	- renamed SAVE_DEFSV (on xs-level only) to avoid symbol clash in
          perl-5.6.
	- new function Coro::Event::idle.
        - the idle process is now overriden
          by default in Coro::Event.
        - Coro::Channel now enforces the size.
        - canceling events now works in all cases.
        - Coro state now include $_ and $@.
        - yet another bug workaround that I do not really understand :(
        - new module Coro::Event::IO (very undocumented) to do
          non-blocking i/o.
        - performance tuning.

0.08  Thu Jul 19 06:13:25 CEST 2001
	- release candidate 2 (new functionality).
	- add Coro::State::flush function.
        - transfer now supports a flags value (mostly for speed ATM).
        - might compile and work in the presence of threads now.
        - continuations have a saner syntax.
        - no more memleaks.

0.07  Tue Jul 17 17:40:18 CEST 2001
	- release candidate 1 ;)
	- slightly nicer code.
        - fixed a scheduling bug in Coro::Event.

0.06  Tue Jul 17 04:23:24 CEST 2001
        - ok, I found the showstopper - the same sub must not be
          re-entered in two different coroutines, otherwise => crash. I
          see no easy solution to this problem, except by walking the call
          chaing and saving/restoring the cv's, which is what I do now.
        - memory leaks still latent, especially at thread termination.
        - Coro::Event now works (haha).

0.05  Sun Jul 15 17:32:20 CEST 2001
	- fixed a few issues in Coro::Event.
        - I forgot to include Coro::Event in 0.04 :(:(:(

0.04  Sun Jul 15 05:24:59 CEST 2001
	- @_ is now properly localized.
	- Coro::State is now easier subclassable.
        - Coro::Cont now coroutine-aware.
        - Coro::Specific is a low-overhead module to create
          coroutine-specific vars.
        - Coro::Event provides a simple interface to Event.

0.03  Fri Jul 13 14:51:52 CEST 2001
	- transfer() now implemented in XS (beware).
	- new module Coro::Cont for really faked continuations.
	- big internal architecture changes: Coro::State is now
          really low-level and can thus be used to implement other
          interesting things, While "Coro::" implements a process-like
          model. Still crude and subject to change.
        - $_ and $@ are no longer being localized.

0.02  Tue Jul 10 01:38:17 CEST 2001
	- implemented "async" attribute.
        - $_ and $@ are now localized.
        - added Coro::Channel.
        - more testcases, still no docs.

0.01  Tue Jul  3 02:18:41 CEST 2001
	- original version; copied from Convert::Scalar.

